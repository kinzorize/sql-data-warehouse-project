
IF OBJECT_ID('silver.crm_cust_info', 'U') IS NOT NULL
	DROP TABLE silver.crm_cust_info;
CREATE TABLE silver.crm_cust_info (
	cst_id INT,
	cst_key NVARCHAR(50),
	cst_firstname NVARCHAR(50),
	cst_lastname  NVARCHAR(50),
	cst_material_status NVARCHAR(50),
	cst_gndr NVARCHAR(50),
	cst_create_date DATE,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);


IF OBJECT_ID ('silver.crm_prd_info', 'U') IS NOT NULL
	DROP TABLE silver.crm_prd_info;
CREATE TABLE silver.crm_prd_info (
	prd_id INT,
	prd_key NVARCHAR(50),
	prd_nm NVARCHAR(50),
	prd_cost INT,
	prd_line NVARCHAR(50),
	prd_start_dt DATETIME,
	prd_end_dt DATETIME,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

IF OBJECT_ID ('silver.crm_sales_details', 'U') IS NOT NULL
	DROP TABLE silver.crm_sales_details;
CREATE TABLE silver.crm_sales_details (
	sls_ord_num NVARCHAR(50),
	sls_prd_key NVARCHAR(50),
	sls_cust_id INT,
	sls_order_dt INT,
	sls_ship_dt INT,
	sls_due_dt INT,
	sls_sales INT,
	sls_quantity INT,
	sls_price INT,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

IF OBJECT_ID ('silver.erp_loc_a101', 'U') IS NOT NULL
	DROP TABLE silver.erp_loc_a101;
CREATE TABLE silver.erp_loc_a101(
	cid NVARCHAR(50),
	cntry NVARCHAR(50),
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

IF OBJECT_ID ('silver.erp_cust_az12', 'U') IS NOT NULL
	DROP TABLE silver.erp_cust_az12;
CREATE TABLE silver.erp_cust_az12 (
	cid NVARCHAR(50),
	bdate DATE,
	gen NVARCHAR(50),
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

IF OBJECT_ID ('silver.erp_px_cat_g1v2', 'U') IS NOT NULL
	DROP TABLE silver.erp_px_cat_g1v2;
CREATE TABLE silver.erp_px_cat_g1v2(
	id NVARCHAR(50),
	cat NVARCHAR(50),
	subcat NVARCHAR(50),
	maintenance NVARCHAR(50),
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);
=========================================================================
SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
CASE	WHEN UPPER(TRIM(cst_marital_status)) = 'S'	THEN 'Single'
		WHEN UPPER(TRIM(cst_marital_status)) = 'M'	THEN 'Married'
		ELSE 'n/a'
END cst_marital_status
,
CASE	WHEN UPPER(TRIM(cst_gndr)) = 'F'	THEN 'Female'
		WHEN UPPER(TRIM(cst_gndr)) = 'M'	THEN 'Male'
		ELSE 'n/a'
END cst_gndr,
cst_create_date
FROM(
SELECT *,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC)AS flag_last
FROM bronze.crm_cust_info)t
WHERE flag_last != 1
=====================================================

-- Check for null or duplicates in primary key
-- Expectation: No Result
SELECT cst_id, COUNT(*)
FROM bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- Check for unwanted Spaces
-- Expectation: No Results
SELECT cst_firstname 
FROM bronze.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)

select * from bronze.crm_cust_info;

--Data Standardization & Consistency
SELECT DISTINCT cst_gndr
FROM bronze.crm_cust_info
==============================================================
-- Check for null or duplicates in primary key
-- Expectation: No Result
SELECT cst_id, COUNT(*)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- Check for unwanted Spaces
-- Expectation: No Results
SELECT cst_lastname 
FROM silver.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname)

select * from silver.crm_cust_info;
select * from bronze.crm_cust_info;


--Data Standardization & Consistency
SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info

-- Check for invalid Date Orders
SELECT *
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt
===========================================================================
INSERT INTO silver.crm_cust_info (
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastname,
	cst_material_status,
	cst_gndr,
	cst_create_date
)

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
CASE	WHEN UPPER(TRIM(cst_material_status)) = 'S'	THEN 'Single'
		WHEN UPPER(TRIM(cst_material_status)) = 'M'	THEN 'Married'
		ELSE 'n/a'
END cst_marital_status
,
CASE	WHEN UPPER(TRIM(cst_gndr)) = 'F'	THEN 'Female'
		WHEN UPPER(TRIM(cst_gndr)) = 'M'	THEN 'Male'
		ELSE 'n/a'
END cst_gndr,
cst_create_date
FROM(
SELECT *,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC)AS flag_last
FROM bronze.crm_cust_info)t
WHERE flag_last != 1;
================================================================================
-- Check For Nulls or Duplicates in Primary Key
-- Expectation: No Result

SELECT 
prd_id,
COUNT (*)
FROM bronze.crm_prd_info
GROUP BY prd_id
HAVING COUNT (*) > 1 OR prd_id IS NULL

--check for unwanted Spaces
-- expectation: No Results
SELECT prd_nm
FROM bronze.crm_prd_info
WHERE prd_nm != TRIM(prd_nm)

SELECT 
prd_cost
FROM bronze.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL


==============================================================
CREATE TABLE bronze.crm_prd_info(
prd_id INT,
prd_key NVARCHAR(50),
prd_nm NVARCHAR(50),
prd_cost INT,
prd_line NVARCHAR(50),
prd_start_dt DATETIME,
prd_end_dt DATETIME
);

SELECT
prd_id,
prd_key,
REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_' ) AS cat_id,
SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
prd_nm ,
ISNULL(prd_cost, 0) AS prd_cost,
CASE UPPER(TRIM(prd_line))
	 WHEN  'M' THEN 'Mountain'
	 WHEN  'R' THEN 'Road'
	 WHEN  'S' THEN 'Other Sales'
	 WHEN  'T' THEN 'Touring'
	 ELSE 'n/a'
END AS prd_line,
CAST(prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt
FROM  bronze.crm_prd_info
WHERE prd_key IN ('AC-HE-HL-U509-R', 'AC-HE-HL-U509')
=================================================================================================
INSERT INTO silver.crm_prd_info (
	prd_id,
	cat_id ,
	prd_key,
	prd_nm,
	prd_cost,
	prd_line,
	prd_start_dt,
	prd_end_dt
)
SELECT
prd_id,
REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_' ) AS cat_id, -- Extract Category ID
SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,         -- Extract product key
prd_nm ,
ISNULL(prd_cost, 0) AS prd_cost,
CASE UPPER(TRIM(prd_line))
	 WHEN  'M' THEN 'Mountain'
	 WHEN  'R' THEN 'Road'
	 WHEN  'S' THEN 'Other Sales'
	 WHEN  'T' THEN 'Touring'
	 ELSE 'n/a'
END AS prd_line, -- Map product line code to descriptive values
CAST(prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt --Calculate end date as one day before the next start date
FROM  bronze.crm_prd_info

==============================================================================================================

INSERT INTO silver.crm_sales_details(
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	sls_sales,
	sls_quantity,
	sls_price
)
SELECT	
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
	END AS sls_order_dt,
	CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
	END AS sls_ship_dt,
	CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
	END AS sls_due_dt,
	CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales
	END AS sls_sales, --Recalculate sales if original value is missing or incorrect
	sls_quantity,
	CASE WHEN sls_price IS NULL OR sls_price <= 0
			THEN sls_sales/ NULLIF(sls_quantity, 0)
		ELSE sls_price
	END AS sls_price  --Derive price if original value is invalid
	FROM 
bronze.crm_sales_details
	

	-- Check for Invalid Dates
	SELECT
	NULLIF(sls_order_dt, 0) sls_order_dt
	FROM bronze.crm_sales_details
	WHERE sls_order_dt <= 0 OR LEN(sls_order_dt) != 8

	--
	SELECT 
	*
	FROM bronze.crm_sales_details
	WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_due_dt

	-- Recalculate sales if original value is missing or incorrect 
	SELECT 
	sls_sales,
	sls_quantity,
	sls_price
	FROM bronze.crm_sales_details
	WHERE sls_sales != sls_quantity * sls_price
	OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
	OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
	ORDER BY sls_sales, sls_quantity, sls_price

SELECT DISTINCT
sls_sales AS old_sls_sales,
sls_quantity,
sls_price AS old_sls_price,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales
END AS sls_sales,
CASE WHEN sls_price IS NULL OR sls_price <= 0
			THEN sls_sales/ NULLIF(sls_quantity, 0)
		ELSE sls_price
END AS sls_price
FROM bronze.crm_sales_details


IF OBJECT_ID ('silver.crm_sales_details', 'U') IS NOT NULL
	DROP TABLE silver.crm_sales_details;
CREATE TABLE silver.crm_sales_details (
	sls_ord_num NVARCHAR(50),
	sls_prd_key NVARCHAR(50),
	sls_cust_id INT,
	sls_order_dt DATE,
	sls_ship_dt DATE,
	sls_due_dt DATE,
	sls_sales INT,
	sls_quantity INT,
	sls_price INT,
	dwh_create_date DATETIME2 DEFAULT GETDATE()
);

SELECT * FROM silver.crm_sales_details;
=======================================================================================

INSERT INTO silver.erp_cust_az12(cid, bdate, gen)
SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
		ELSE cid
	END cid,
CASE WHEN bdate > GETDATE() THEN NULL
	ELSE bdate
	END AS bdate,
CASE WHEN UPPER(TRIM(gen)) in ('M','MALE') THEN 'Male'
		WHEN UPPER(TRIM(gen)) in ('F','FEMALE') THEN 'Female'
		ELSE 'n/a'
END AS gen
FROM bronze.erp_cust_az12

-- Identify Out-of_range Dates
SELECT DISTINCT
bdate
FROM bronze.erp_cust_az12
WHERE bdate < '1924-01-01' OR bdate > GETDATE()

-- Data Standardization & Consistency
SELECT DISTINCT 
gen,
CASE WHEN UPPER(TRIM(gen)) in ('M','MALE') THEN 'Male'
		WHEN UPPER(TRIM(gen)) in ('F','FEMALE') THEN 'Female'
		ELSE 'n/a'
END AS gen
FROM bronze.erp_cust_az12


-- Rename the columns 
-- First rename the columns if they exist in the target table
EXEC sp_rename 'silver.erp_cust_az12.bdate', 'birthdate', 'COLUMN';
EXEC sp_rename 'silver.erp_cust_az12.gen', 'gender', 'COLUMN';

-- Then insert the data with the new column names
INSERT INTO silver.erp_cust_az12(cid, birthdate, gender)
SELECT 
    CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
        ELSE cid
    END cid,
    CASE WHEN bdate > GETDATE() THEN NULL
        ELSE bdate
    END AS birthdate,
    CASE WHEN UPPER(TRIM(gen)) in ('M','MALE') THEN 'Male'
        WHEN UPPER(TRIM(gen)) in ('F','FEMALE') THEN 'Female'
        ELSE 'n/a'
    END AS gender
FROM bronze.erp_cust_az12;
SELECT * FROM silver.erp_cust_az12
================================================================================================
INSERT INTO silver.erp_loc_a101
(cid, cntry)
SELECT 
REPLACE(cid,'-','') cid,
CASE	WHEN TRIM(cntry) = 'DE' THEN 'Germany'
		WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
		WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
		ELSE TRIM(cntry)
END AS cntry -- Normalize and Handle missing or blank country codes
FROM bronze.erp_loc_a101;

--Data Standardization & Consistency
SELECT DISTINCT cntry
FROM bronze.erp_loc_a101
ORDER BY cntry

SELECT * FROM silver.erp_loc_a101;
=====================================================================================================
INSERT INTO silver.erp_px_cat_g1v2
(id, cat, subcat, maintenance)
SELECT 
id,
cat,
subcat,
maintenance
FROM bronze.erp_px_cat_g1v2

-- Check for unwanted Spaces
SELECT * FROM bronze.erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat != TRIM(subcat) OR maintenance != TRIM(maintenance)

-- Data Standardization & Consistency
SELECT DISTINCT
cat
FROM 
bronze.erp_px_cat_g1v2

select * from silver.erp_px_cat_g1v2
======================================================================================
PRINT ' >> Truncating Table: silver.erp_px_cat_g1v2';
TRUNCATE TABLE silver.erp_px_cat_g1v2;
PRINT '>> Inserting Data Into: silver.erp_px_cat_g1v2'
INSERT INTO silver.erp_px_cat_g1v2
(id, cat, subcat, maintenance)
SELECT 
id,
cat,
subcat,
maintenance
FROM bronze.erp_px_cat_g1v2

-- Check for unwanted Spaces
SELECT * FROM bronze.erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat != TRIM(subcat) OR maintenance != TRIM(maintenance)

-- Data Standardization & Consistency
SELECT DISTINCT
cat
FROM 
bronze.erp_px_cat_g1v2

select * from silver.erp_px_cat_g1v2
=============================================================================================
PRINT ' >> Truncating Table: silver.crm_cust_info';
TRUNCATE TABLE silver.crm_cust_info;
PRINT '>> Inserting Data Into: silver.crm_cust_info'
INSERT INTO silver.crm_cust_info (
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastname,
	cst_material_status,
	cst_gndr,
	cst_create_date
)

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
CASE	WHEN UPPER(TRIM(cst_material_status)) = 'S'	THEN 'Single'
		WHEN UPPER(TRIM(cst_material_status)) = 'M'	THEN 'Married'
		ELSE 'n/a'
END cst_marital_status
,
CASE	WHEN UPPER(TRIM(cst_gndr)) = 'F'	THEN 'Female'
		WHEN UPPER(TRIM(cst_gndr)) = 'M'	THEN 'Male'
		ELSE 'n/a'
END cst_gndr,
cst_create_date
FROM(
SELECT *,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC)AS flag_last
FROM bronze.crm_cust_info)t
WHERE flag_last != 1;



PRINT ' >> Truncating Table: silver.crm_prd_info';
TRUNCATE TABLE silver.crm_prd_info;
PRINT '>> Inserting Data Into: silver.crm_prd_info'
INSERT INTO silver.crm_prd_info (
	prd_id,
	cat_id ,
	prd_key,
	prd_nm,
	prd_cost,
	prd_line,
	prd_start_dt,
	prd_end_dt
)
SELECT
prd_id,
REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_' ) AS cat_id, -- Extract Category ID
SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,         -- Extract product key
prd_nm ,
ISNULL(prd_cost, 0) AS prd_cost,
CASE UPPER(TRIM(prd_line))
	 WHEN  'M' THEN 'Mountain'
	 WHEN  'R' THEN 'Road'
	 WHEN  'S' THEN 'Other Sales'
	 WHEN  'T' THEN 'Touring'
	 ELSE 'n/a'
END AS prd_line, -- Map product line code to descriptive values
CAST(prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt --Calculate end date as one day before the next start date
FROM  bronze.crm_prd_info



PRINT '>> Truncating Table: silver.crm_sales_details';
TRUNCATE TABLE silver.crm_sales_details;
PRINT '>> Inserting Data Into: silver.crm_sales_details'
INSERT INTO silver.crm_sales_details(
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	sls_sales,
	sls_quantity,
	sls_price
)
SELECT	
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
	END AS sls_order_dt,
	CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
	END AS sls_ship_dt,
	CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
	END AS sls_due_dt,
	CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales
	END AS sls_sales, --Recalculate sales if original value is missing or incorrect
	sls_quantity,
	CASE WHEN sls_price IS NULL OR sls_price <= 0
			THEN sls_sales/ NULLIF(sls_quantity, 0)
		ELSE sls_price
	END AS sls_price  --Derive price if original value is invalid
	FROM 
bronze.crm_sales_details


PRINT '>> Truncating Table: silver.erp_cust_az12';
TRUNCATE TABLE silver.erp_cust_az12;
PRINT '>> Inserting Data Into: silver.erp_cust_az12'
INSERT INTO silver.erp_cust_az12(cid, birthdate, gender)
SELECT 
    CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
        ELSE cid
    END cid,
    CASE WHEN bdate > GETDATE() THEN NULL
        ELSE bdate
    END AS birthdate,
    CASE WHEN UPPER(TRIM(gen)) in ('M','MALE') THEN 'Male'
        WHEN UPPER(TRIM(gen)) in ('F','FEMALE') THEN 'Female'
        ELSE 'n/a'
    END AS gender
FROM bronze.erp_cust_az12;
SELECT * FROM silver.erp_cust_az12


PRINT '>> Truncating Table: silver.erp_loc_a101';
TRUNCATE TABLE silver.erp_loc_a101;
PRINT '>> Inserting Data Into: silver.erp_loc_a101'
INSERT INTO silver.erp_loc_a101
(cid, cntry)
SELECT 
REPLACE(cid,'-','') cid,
CASE	WHEN TRIM(cntry) = 'DE' THEN 'Germany'
		WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
		WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
		ELSE TRIM(cntry)
END AS cntry -- Normalize and Handle missing or blank country codes
FROM bronze.erp_loc_a101;

PRINT ' >> Truncating Table: silver.erp_px_cat_g1v2';
TRUNCATE TABLE silver.erp_px_cat_g1v2;
PRINT '>> Inserting Data Into: silver.erp_px_cat_g1v2'
INSERT INTO silver.erp_px_cat_g1v2
(id, cat, subcat, maintenance)
SELECT 
id,
cat,
subcat,
maintenance
FROM bronze.erp_px_cat_g1v2
==============================================================================================================================
EXEC silver.load_silver

CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN


PRINT ' >> Truncating Table: silver.crm_cust_info';
TRUNCATE TABLE silver.crm_cust_info;
PRINT '>> Inserting Data Into: silver.crm_cust_info'
INSERT INTO silver.crm_cust_info (
	cst_id,
	cst_key,
	cst_firstname,
	cst_lastname,
	cst_material_status,
	cst_gndr,
	cst_create_date
)

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
CASE	WHEN UPPER(TRIM(cst_material_status)) = 'S'	THEN 'Single'
		WHEN UPPER(TRIM(cst_material_status)) = 'M'	THEN 'Married'
		ELSE 'n/a'
END cst_marital_status
,
CASE	WHEN UPPER(TRIM(cst_gndr)) = 'F'	THEN 'Female'
		WHEN UPPER(TRIM(cst_gndr)) = 'M'	THEN 'Male'
		ELSE 'n/a'
END cst_gndr,
cst_create_date
FROM(
SELECT *,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC)AS flag_last
FROM bronze.crm_cust_info)t
WHERE flag_last != 1;



PRINT ' >> Truncating Table: silver.crm_prd_info';
TRUNCATE TABLE silver.crm_prd_info;
PRINT '>> Inserting Data Into: silver.crm_prd_info'
INSERT INTO silver.crm_prd_info (
	prd_id,
	cat_id,
	prd_key,
	prd_nm,
	prd_cost,
	prd_line,
	prd_start_dt,
	prd_end_dt
)
SELECT
prd_id,
REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_' ) AS cat_id, -- Extract Category ID
SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,         -- Extract product key
prd_nm ,
ISNULL(prd_cost, 0) AS prd_cost,
CASE UPPER(TRIM(prd_line))
	 WHEN  'M' THEN 'Mountain'
	 WHEN  'R' THEN 'Road'
	 WHEN  'S' THEN 'Other Sales'
	 WHEN  'T' THEN 'Touring'
	 ELSE 'n/a'
END AS prd_line, -- Map product line code to descriptive values
CAST(prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt --Calculate end date as one day before the next start date
FROM  bronze.crm_prd_info



PRINT '>> Truncating Table: silver.crm_sales_details';
TRUNCATE TABLE silver.crm_sales_details;
PRINT '>> Inserting Data Into: silver.crm_sales_details'
INSERT INTO silver.crm_sales_details(
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	sls_sales,
	sls_quantity,
	sls_price
)
SELECT	
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
	END AS sls_order_dt,
	CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
	END AS sls_ship_dt,
	CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
	ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
	END AS sls_due_dt,
	CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
		THEN sls_quantity * ABS(sls_price)
	ELSE sls_sales
	END AS sls_sales, --Recalculate sales if original value is missing or incorrect
	sls_quantity,
	CASE WHEN sls_price IS NULL OR sls_price <= 0
			THEN sls_sales/ NULLIF(sls_quantity, 0)
		ELSE sls_price
	END AS sls_price  --Derive price if original value is invalid
	FROM 
bronze.crm_sales_details


PRINT '>> Truncating Table: silver.erp_cust_az12';
TRUNCATE TABLE silver.erp_cust_az12;
PRINT '>> Inserting Data Into: silver.erp_cust_az12'
INSERT INTO silver.erp_cust_az12(cid, birthdate, gender)
SELECT 
    CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
        ELSE cid
    END cid,
    CASE WHEN bdate > GETDATE() THEN NULL
        ELSE bdate
    END AS birthdate,
    CASE WHEN UPPER(TRIM(gen)) in ('M','MALE') THEN 'Male'
        WHEN UPPER(TRIM(gen)) in ('F','FEMALE') THEN 'Female'
        ELSE 'n/a'
    END AS gender
FROM bronze.erp_cust_az12;



PRINT '>> Truncating Table: silver.erp_loc_a101';
TRUNCATE TABLE silver.erp_loc_a101;
PRINT '>> Inserting Data Into: silver.erp_loc_a101'
INSERT INTO silver.erp_loc_a101
(cid, cntry)
SELECT 
REPLACE(cid,'-','') cid,
CASE	WHEN TRIM(cntry) = 'DE' THEN 'Germany'
		WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
		WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
		ELSE TRIM(cntry)
END AS cntry -- Normalize and Handle missing or blank country codes
FROM bronze.erp_loc_a101;

PRINT ' >> Truncating Table: silver.erp_px_cat_g1v2';
TRUNCATE TABLE silver.erp_px_cat_g1v2;
PRINT '>> Inserting Data Into: silver.erp_px_cat_g1v2'
INSERT INTO silver.erp_px_cat_g1v2
(id, cat, subcat, maintenance)
SELECT 
id,
cat,
subcat,
maintenance
FROM bronze.erp_px_cat_g1v2

END;

